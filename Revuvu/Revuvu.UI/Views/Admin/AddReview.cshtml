@model Revuvu.UI.Models.ReviewVM
@{

    ViewBag.Title = "AddReview";
}

<script src="https://cloud.tinymce.com/stable/tinymce.min.js?apiKey=w99zovxxb0j9voz7xuw5letbvk6oud6qyi7qfilb00doaiq0"></script>

<h2 id="page-header-name">Add Review</h2>

@using (Html.BeginForm("AddReview", "Admin", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    @Html.AntiForgeryToken()
    <h4>Create a new review.</h4>
    <hr />
    @Html.ValidationSummary("", new { @class = "text-danger" })
    <div class="form-group">
        @Html.LabelFor(m => m.Review.ReviewTitle, "Title", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Review.ReviewTitle, new { @class = "form-control" })
            <span class="text-danger">@Html.ValidationMessageFor(m => m.Review.ReviewTitle)</span>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Review.Rating, "Rating", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Review.Rating, new { @class = "form-control", type = "number" })
            <span class="text-danger">@Html.ValidationMessageFor(m => m.Review.Rating)</span>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Review.DatePublished, "Publish Date", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Review.DatePublished, new { @class = "form-control", type = "date" })
            <span class="text-danger">@Html.ValidationMessageFor(m => m.Review.DatePublished)</span>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Category, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.DropDownListFor(m => m.Review.CategoryId, Model.CategoryList, "-Choose One-", new { @class = "form-control" })
            <span class="text-danger">@Html.ValidationMessageFor(m => m.Review.CategoryId)</span>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Review.ReviewBody, "Review Body", new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextAreaFor(m => m.Review.ReviewBody, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <label class="col-md-2 control-label">Tags</label>
        <div class="col-md-10">
            <input type="text" name="newTags" class="form-control"
                   value="" data-role="tagsinput" />
        </div>
    </div>

    //rating
    //category
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button type="submit" class="btn btn-primary" value="Register">Add Review</button>
        </div>
    </div>
}

@section Scripts
    {
    <script>
        tinymce.init({
            selector: 'textarea',
            height: 500,
            menubar: false,
            plugins: [
                'advlist autolink lists link image charmap print preview anchor textcolor',
                'searchreplace visualblocks code fullscreen',
                'insertdatetime media table contextmenu paste code help wordcount'
            ],
            toolbar: 'insert | undo redo |  formatselect | bold italic backcolor  | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | removeformat | help',
            content_css: [
                '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
                '//www.tinymce.com/css/codepen.min.css']
        });

        $(document).ready(function () {
            $('#bootstrapTagsInputForm')
                .find('[name="newTags"]')
                // Revalidate the cities field when it is changed
                .change(function (e) {
                    $('#bootstrapTagsInputForm').formValidation('revalidateField', 'newTags');
                })
                .end()
                //.find('[name="countries"]')
                //// Revalidate the countries field when it is changed
                //.change(function (e) {
                //    $('#bootstrapTagsInputForm').formValidation('revalidateField', 'countries');
                //})
                //.end()
                .formValidation({
                    framework: 'bootstrap',
                    excluded: ':disabled',
                    icon: {
                        valid: 'glyphicon glyphicon-ok',
                        invalid: 'glyphicon glyphicon-remove',
                        validating: 'glyphicon glyphicon-refresh'
                    },
                    fields: {
                        cities: {
                            validators: {
                                notEmpty: {
                                    message: 'Please enter at least one city you like the most.'
                                }
                            }
                        },
                        countries: {
                            validators: {
                                callback: {
                                    message: 'Please enter 2-4 countries you like most.',
                                    callback: function (value, validator, $field) {
                                        // Get the entered elements
                                        var options = validator.getFieldElements('countries').tagsinput('items');
                                        return (options !== null && options.length >= 2 && options.length <= 4);
                                    }
                                }
                            }
                        }
                    }
                });
        });
    </script>

}

